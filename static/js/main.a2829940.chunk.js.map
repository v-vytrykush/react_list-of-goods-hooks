{"version":3,"sources":["components/GoodsList.tsx","App.tsx","index.tsx"],"names":["GoodsList","goods","className","map","good","goodsFromServer","App","useState","setGoods","isGoodsVisible","setIsGoodsVisible","type","onClick","current","reverse","sort","firstGood","secondGood","localeCompare","length","ReactDOM","render","document","getElementById"],"mappings":"iOAIaA,EAA6B,SAAC,GAAe,IAAbC,EAAY,EAAZA,MAC3C,OACE,oBAAIC,UAAU,aAAd,SACGD,EAAME,KAAI,SAAAC,GAAI,OACb,oBAEEF,UAAU,kBAFZ,SAIGE,GAHIA,SCLTC,EAA4B,CAChC,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,UAoFaC,EAjFO,WACpB,MAA0BC,mBAAS,GAAD,OAAKF,IAAvC,mBAAOJ,EAAP,KAAcO,EAAd,KACA,EAA4CD,oBAAS,GAArD,mBAAOE,EAAP,KAAuBC,EAAvB,KAwBA,OACE,sBAAKR,UAAU,YAAf,UACE,wBACES,KAAK,SACLT,UAAWO,EACP,aACA,cACJG,QA7BY,WAChBF,GAAkB,SAAAG,GAAO,OAAKA,MAuB5B,SAOGJ,EACG,aACA,eAELA,GAEC,cAAC,EAAD,CAAWR,MAAOA,IAEnBQ,GAEC,qCACE,wBACEE,KAAK,SACLT,UAAU,cACVU,QAzCW,WACnBJ,GAAS,SAAAK,GAAO,OAAI,YAAIA,GAASC,cAqC3B,qBAOA,wBACEH,KAAK,SACLT,UAAU,cACVU,QA5CiB,WACzBJ,GAAS,SAAAK,GAAO,OAAI,YAAIA,GACrBE,MAAK,SAACC,EAAWC,GAAZ,OAA2BD,EAAUE,cAAcD,UAuCrD,iCAOA,wBACEN,KAAK,SACLT,UAAU,cACVU,QA9CW,WACnBJ,GAAS,SAAAK,GAAO,OAAI,YAAIA,GACrBE,MAAK,SAACC,EAAWC,GAAZ,OAA2BD,EAAUG,OAASF,EAAWE,cAyC3D,4BAOA,wBACER,KAAK,SACLT,UAAU,cACVU,QAhDI,WACZJ,EAAS,GAAD,OAAKH,KA4CP,0BCjFVe,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.a2829940.chunk.js","sourcesContent":["type Props = {\n  goods: string[]\n};\n\nexport const GoodsList: React.FC<Props> = ({ goods }) => {\n  return (\n    <ul className=\"list-group\">\n      {goods.map(good => (\n        <li\n          key={good}\n          className=\"list-group-item\"\n        >\n          {good}\n        </li>\n      ))}\n    </ul>\n  );\n};\n","import React, { useState } from 'react';\nimport './App.scss';\nimport { GoodsList } from './components';\n\nconst goodsFromServer: string[] = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nconst App: React.FC = () => {\n  const [goods, setGoods] = useState([...goodsFromServer]);\n  const [isGoodsVisible, setIsGoodsVisible] = useState(false);\n\n  const showGoods = () => {\n    setIsGoodsVisible(current => !current);\n  };\n\n  const reverseGoods = () => {\n    setGoods(current => [...current].reverse());\n  };\n\n  const sortAlphabetically = () => {\n    setGoods(current => [...current]\n      .sort((firstGood, secondGood) => firstGood.localeCompare(secondGood)));\n  };\n\n  const sortByLength = () => {\n    setGoods(current => [...current]\n      .sort((firstGood, secondGood) => firstGood.length - secondGood.length));\n  };\n\n  const reset = () => {\n    setGoods([...goodsFromServer]);\n  };\n\n  return (\n    <div className=\"container\">\n      <button\n        type=\"button\"\n        className={isGoodsVisible\n          ? 'btn-danger'\n          : 'btn-primary'}\n        onClick={showGoods}\n      >\n        {isGoodsVisible\n          ? 'Hide goods'\n          : 'Show goods'}\n      </button>\n      {isGoodsVisible\n      && (\n        <GoodsList goods={goods} />\n      )}\n      {isGoodsVisible\n      && (\n        <>\n          <button\n            type=\"button\"\n            className=\"btn-primary\"\n            onClick={reverseGoods}\n          >\n            Reverse\n          </button>\n          <button\n            type=\"button\"\n            className=\"btn-primary\"\n            onClick={sortAlphabetically}\n          >\n            Sort alphabetically\n          </button>\n          <button\n            type=\"button\"\n            className=\"btn-primary\"\n            onClick={sortByLength}\n          >\n            Sort by length\n          </button>\n          <button\n            type=\"button\"\n            className=\"btn-primary\"\n            onClick={reset}\n          >\n            Reset\n          </button>\n        </>\n\n      )}\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}